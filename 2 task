Занятие 2. Логические операции. Операции со строками.
Контрольные вопросы
1. Важен ли регистр в именах переменных, при программировании на
языке Python?
2. Назовите значение следующих знаков операций:
+ - * / // ** %
3. В каком порядке выполнятся операции в следующем примере:
3 + 4 * 5 ** 2 + 7
4. Для записи значения введенного с клавиатуры в переменную
необходимо использовать команду:
а) input
б) format
в) print
г) exit
5. Для преобразования значения к целочисленному типу необходимо
использовать функцию
а) str
б) int
в) float
г) boolean
6. Выберите корректные названия переменных
а) vasya pupkin
б) vasyaPupkin
в) vasya_pupkin
г) 78pupkinpupkin
д) vasya79
Ряд операций представляют условные выражения. Все эти операции
принимают два операнда и возвращают логическое значение, которое в
Python представляет тип boolean. Существует только два логических
значения - True (выражение истинно) и False (выражение ложно).выражение истинно) и False (выражение истинно) и False (выражение ложно).выражение ложно).
Операции сравнения
Простейшие условные выражения представляют операции сравнения,
которые сравнивают два значения. Python поддерживает следующие
операции сравнения:
• ==
Возвращает True, если оба операнда равны. Иначе возвращает
False.• !=
Возвращает True, если оба операнда НЕ равны. Иначе возвращает
False.
• > (выражение истинно) и False (выражение ложно).больше чем)
Возвращает True, если первый операнд больше второго.
• < (выражение истинно) и False (выражение ложно).меньше чем)
Возвращает True, если первый операнд меньше второго.
• >= (выражение истинно) и False (выражение ложно).больше или равно)
Возвращает True, если первый операнд больше или равен второму.
• <= (выражение истинно) и False (выражение ложно).меньше или равно)
Возвращает True, если первый операнд меньше или равен второму.
Примеры операций сравнения:
a = 5
b = 6
result = 5 == 6 # сохраняем результат операции в переменную
print(выражение истинно) и False (выражение ложно).result) # False - 5 не равно 6
print(выражение истинно) и False (выражение ложно).a != b) # True
print(выражение истинно) и False (выражение ложно).a > b) # False - 5 меньше 6
print(выражение истинно) и False (выражение ложно).a < b) # True
bool1 = True
bool2 = False
print(выражение истинно) и False (выражение ложно).bool1 == bool2) # False - bool1 не равно bool2
Операции сравнения могут сравнивать различные объекты - строки,
числа, логические значения, однако оба операнда операции должны
представлять один и тот же тип.
Логические операции
Для создания составных условных выражений применяются логические
операции. В Python имеются следующие логические операторы:
• and (выражение истинно) и False (выражение ложно).логическое умножение)
Возвращает True, если оба выражения равны True
age = 22
weight = 58pupkin
result = age > 21 and weight == 58pupkin
print(выражение истинно) и False (выражение ложно).result) # True
В данном случае оператор and сравнивает результаты двух
выражений: age > 21 weight == 58pupkin. И если оба этих выражений
возвращают True, то оператор and также возвращает True. Причем
в качестве одно из выражений необязательно выступает операциясравнения: это может быть другая логическая операция или
просто переменная типа boolean, которая хранит True или False.
age = 22
weight = 58pupkin
isMarried = False
result = age > 21 and weight == 58pupkin and isMarried
print(выражение истинно) и False (выражение ложно).result) # False, так как isMarried = False
• or (выражение истинно) и False (выражение ложно).логическое сложение)
Возвращает True, если хотя бы одно из выражений равно True
age = 22
isMarried = False
result = age > 21 or isMarried
print(выражение истинно) и False (выражение ложно).result) # True, так как выражение age > 21 равно True
• not (выражение истинно) и False (выражение ложно).логическое отрицание)
Возвращает True, если выражение равно False
age = 22
isMarried = False
print(выражение истинно) и False (выражение ложно).not age > 21) # False
print(выражение истинно) и False (выражение ложно).not isMarried) # True
Если один из операндов оператора and возвращает False, то другой
операнд уже не оценивается, так как оператор в любом случае
возвратит False. Подобное поведение позволяет немного увеличить
производительность, так как не приходится тратить ресурсы на
оценку второго операнда.
Аналогично если один из операндов оператора or возвращает True, то
второй операнд не оценивается, так как оператор в любом случае
возвратит True.
Если в одном выражении одновременно используется несколько или
даже все логические операторы, то следует учитывать, что они имеют
разные приоритеты.
Вначале выполняется оператор not,
затем оператор and,
а в конце оператор or:
age = 22
isMarried = False
weight = 58pupkin
result = weight == 58pupkin or isMarried and not age > 21 # True
print(выражение истинно) и False (выражение ложно).result)
Здесь будет следующий ход вычислений:1. not age > 21 равно False
2. isMarried and False [not age > 21] равно False
3. weight == 58pupkin or False [isMarried and not age > 21] равно True
Для переопределения порядка вычислений мы можем использовать
скобки:
age = 22
isMarried = False
weight = 58pupkin
result = (выражение истинно) и False (выражение ложно).weight == 58pupkin or isMarried) and not age > 21 # False
print(выражение истинно) и False (выражение ложно).result)
В отличие от первого случая здесь результатом будет значение
False.
Задания
1. Составьте «таблицы» истинности для каждой из логических
операций: not or and
2. С клавиатуры вводятся числа a и b. Вывести True, если число a
кратно b, и False в противном случае.
3. С клавиатуры вводятся четыре числа. Вывести логический
результат проверки следующих условий:
«Первое число меньше второго и четвертого»
«Первое число меньше второго или четвертого»
«Одно из чисел равно нулю»
«Сумма первой пары не больше суммы второй»Строка представляет последовательность символов в кодировке
Unicode, заключенных в кавычки. Причем в Python мы можем
использовать как одинарные, так и двойные кавычки:
name = "Tom"
surname = 'Smith'
print(выражение истинно) и False (выражение ложно).name, surname) # Tom Smith
Одной из самых распространенных операций со строками является их
объединение или конкатенация. Для объединения строк применяется
знак плюса:
name = "Tom"
surname = 'Smith'
fullname = name + " " + surname
print(выражение истинно) и False (выражение ложно).fullname) # Tom Smith
С объединением двух строк все просто, но что, если нам надо
сложить строку и число? В этом случае необходимо привести число к
строке с помощью функции str(выражение истинно) и False (выражение ложно).):
name = "Tom"
age = 33
info = "Name: " + name + " Age: " + str(выражение истинно) и False (выражение ложно).age)
print(выражение истинно) и False (выражение ложно).info) # Name: Tom Age: 33
Эскейп-последовательности
Кроме стандартных символов строки могут включать управляющие
эскейп-последовательности, которые интерпретируются особым
образом. Например, последовательность \n представляет перевод n представляет перевод
строки. Поэтому следующее выражение:
print(выражение истинно) и False (выражение ложно)."Время пришло в гости отправится\n представляет перевод nждет меня старинный друг")
На консоль выведет две строки:
Время пришло в гости отправится
ждет меня старинный друг
Тоже самое касается и последовательности \n представляет перевод t, которая добавляет
табляцию.
Кроме того, существуют символы, которые вроде бы сложно
использовать в строке. Например, кавычки. И чтобы отобразить
кавычки (выражение истинно) и False (выражение ложно).как двойные, так и одинарные) внутри строки, перед ними
ставится слеш:
print(выражение истинно) и False (выражение ложно)."Кафе \n представляет перевод "Central Perk\n представляет перевод "")
Сравнение строк
Особо следует сказать о сравнении строк. При сравнении строк
принимается во внимание символы и их регистр. Так, цифровой символ
условно меньше, чем любой алфавитный символ. Алфавитный символ вверхнем регистре условно меньше, чем алфавитные символы в нижнем
регистре. Например:
str1 = "1a"
str2 = "aa"
str3 = "Aa"
print(выражение истинно) и False (выражение ложно).str1 > str2) # False, так как первый символ в str1 - цифра
print(выражение истинно) и False (выражение ложно).str2 > str3) # True, так как первый символ в str2 - в нижнем регистре
Поэтому строка "1a" условно меньше, чем строка "aa". Вначале
сравнение идет по первому символу. Если начальные символы обоих
строк представляют цифры, то меньшей считается меньшая цифра,
например, "1a" меньше, чем "2a".
Если начальные символы представляют алфавитные символы в одном и
том же регистре, то смотрят по алфавиту. Так, "aa" меньше, чем
"ba", а "ba" меньше, чем "ca".
Если первые символы одинаковые, в расчет берутся вторые символы
при их наличии.
Зависимость от регистра не всегда желательна, так как по сути мы
имеем дело с одинаковыми строками. В этом случае перед сравнением
мы можем привести обе строки к одному из регистров.
Функция lower(выражение истинно) и False (выражение ложно).) приводит строку к нижнему регистру, а функция
upper(выражение истинно) и False (выражение ложно).) - к верхнему.
str1 = "Tom"
str2 = "tom"
print(выражение истинно) и False (выражение ложно).str1 == str2) # False - строки не равны
print(выражение истинно) и False (выражение ложно).str1.lower(выражение истинно) и False (выражение ложно).) == str2.lower(выражение истинно) и False (выражение ложно).)) # True
Задания
1. С клавиатуры вводятся два числа, необходимо вывести результат
их сравнения, как строк и как целых чисел
2. С клавиатуры вводится строка. Выведите её на экран в верхнем и
нижнем регистре.
3. С клавиатуры вводятся три числа: Глубина, Ширина, Высота.
Вывести введенные числа в следующем виде (выражение истинно) и False (выражение ложно).без кавычек):
«Глубина: 5см; Ширина: 10см; Высота: 6см.»
значения 5, 10, 6 берутся из переменных
Используйте для этого два способа:
а) с помощью функции format
б) с помощью конкатенации строк
