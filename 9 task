Занятие 9. Кортежи
Контрольные вопросы
1. Список описывается с испольванием скобок
a) ()
b) []
c) {}
d) <>
2. Оператор list() может принимать параметр следующего типа
a) 1 список
b) несколько списков
c) число
d) не принимает параметров
3. Для обращения к элементам списка используются скобки
a) ()
b) []
c) {}
d) <>
4. Список a=[1,2,3], значение a[-1] хранит число
a) 1
b) 2
c) 3
d) Такого индекса не существует
5. Метод списка pop()
a) Удаляет последний элемент из списка
b) Извлекает и возвращает последний элемент из списка
c) Удаляет первый элемент из списка
d) Извлекает и возвращает первый элемент из списка
6. Операции min() и max() являются
a) методами списка
b) отдельными функциями
c) не применимы к спискам
d) не существуют в языке python
7. После выполнения следующей программы:
a=[1,2,3]
b=a
a.append(4)
a.reverse()
список b будет хранить:
a) [1,2,3,4]
b) [1,2,3]
c) [3,2,1]
d) [4,3,2,1]Кортеж (tuple) представляет последовательность элементов, которая
во многом похожа на список за тем исключением, что кортеж является
неизменяемым (immutable) типом. Поэтому мы не можем добавлять или
удалять элементы в кортеже, изменять его.
Для создания кортежа используются круглые скобки, в которые
помещаются его значения, разделенные запятыми:
user = ("Tom", 23)
print(user)
Также для определения кортежа мы можем просто перечислить значения
через запятую без применения скобок:
user = "Tom", 23
print(user)
Если вдруг кортеж состоит из одного элемента, то после
единственного элемента кортежа необходимо поставить запятую:
user = ("Tom",)
Для создания кортежа из списка можно передать список в функцию
tuple(), которая возвратит кортеж:
users_list = ["Tom", "Bob", "Kate"]
users_tuple = tuple(users_list)
print(users_tuple) # ("Tom", "Bob", "Kate")
Обращение к элементам в кортеже происходит также, как и в списке
по индексу. Индексация начинается также с нуля при получении
элементов с начала списка и с -1 при получении элементов с конца
списка:
users = ("Tom", "Bob", "Sam", "Kate")print(users[0]) # Tom
print(users[2]) # Sam
print(users[-1]) # Kate
# получим часть кортежа со 2 элемента по 4
print(users[1:4]) # ("Bob", "Sam", "Kate")
Но так как кортеж - неизменяемый тип (immutable), то мы не сможем
изменить его элементы. То есть следующая запись работать не будет:
users[1] = "Tim"
При необходимости мы можем разложить кортеж на отдельные
переменные:
user = ("Tom", 22, False)
name, age, isMarried = user
print(name) # Tom
print(age) # 22
print(isMarried) # False
Особенно удобно использовать кортежи, когда необходимо возвратить
из функции сразу несколько значений. Когда функция возвращает
несколько значений, фактически она возвращает в кортеж:
def get_user():
name = "Tom"
age = 22
is_married = False
return name, age, is_married
user = get_user()print(user[0]) # Tom
print(user[1]) # 22
print(user[2]) # False
С помощью встроенной функции len() можно получить длину кортежа:
user = ("Tom", 22, False)
print(len(user)) # 3
Перебор кортежей
Для перебора кортежа можно использовать стандартные циклы for и
while. С помощью цикла for:
user = ("Tom", 22, False)
for item in user:
print(item)
С помощью цикла while:
user = ("Tom", 22, False)
i = 0
while i < len(user):
print(user[i])
i += 1
Как для списка с помощью выражения элемент in кортеж можно
проверить наличие элемента в кортеже:
user = ("Tom", 22, False)
name = "Tom"
if name in user:print("Пользователя зовут Tom")
else:
print("Пользователь имеет другое имя")
Сложные кортежи
Один кортеж может содержать другие кортежи в виде элементов.
Например:
countries = (
("Germany", 80.2, (("Berlin",3.326), ("Hamburg", 1.718))),
("France", 66, (("Paris", 2.2),("Marsel", 1.6)))
)
for country in countries:
countryName, countryPopulation, cities = country
print("\nCountry: {} population: {}".format(countryName,
countryPopulation))
for city in cities:
cityName, cityPopulation = city
print("City: {} population: {}".format(cityName,
cityPopulation))
Здесь кортеж countries, который представляет страны, состоит из
кортежей, каждый из которых - отдельная страна.
Вложенные кортежи имеют три элемента: название страны, численность
ее населения и города. Города представляют отдельный кортеж, где
каждый отдельный город - это вложенный кортеж, содержащий название
города и численность его населения.Самостоятельная работа
Дана функция Y, на интервале [-10;10]
y = 2*|x|-1 при x < -5;
y = 2x при x > 5;
y = x2 при -5 <= x <= 5.
Составить таблицу значений данной функции с шагом 0.5 на интервале
[-10;10].
Порядок выполнения работы:
1. Реализовать функцию func(x), которая возвращает кортеж значений
функции (x,y)
2. Осуществить вывод значений функции используя цикл while.
3. Переделать полученную программу так, чтобы вместо кортежа,
функция возвращала список из значений [x, y].
4. Создать сложный кортеж из значений функции вида
(
(x1,y1),
(x2,y2),
(x3,y3),
...
)
5. Используя цикл foreach вывести значения из полученного кортежа
на экран.
