Занятие 5. Функции. Область видимости переменных.
Контрольные вопросы
1. Какие служебные слова используются для описания конструкции
цикла в языке Python
а) while
б) for
в) if
г) range
2. Команды предназначенные для выполнения в теле цикла
а) записываются без отступа
б) записываются с отступом
в) записываются в фигурных скобках {}
г) обрамляются служебными словами begin и end
3. Конструкция «while условное_выражение:» выполняет тело цикла
а) До нажатия пользователем любой клавиши
б) Один раз
в) Пока условное_выражение истинно
г) Пока условное_выражение ложно
4. Конструкция «for int_var in функция_range:» выполняет тело
цикла
а) До нажатия пользователем любой клавиши
б) Один раз
в) Для каждого значения из диапазона функции range
г) Пока функция range истинна
5. Переменная int_var в цикле «for int_var in функция_range:»
а) Не изменяется
б) Принимает значения от 1 до значения функции range
в) Принимает значения от 0 до значения функции range
г) Принимает значения из диапазона функции range
6. Циклы for и while могут быть вложены друг в друга
а) нет, не могут
б) 1 раз
в) не более 3-х раз
г) неограниченное количество разФункции представляют блок кода, который выполняет определенную
задачу и который можно повторно использовать в других частях
программы. Формальное определение функции:
def имя_функции ([параметры]):
инструкции
Определение функции начинается с выражения def, которое состоит из
имени функции, набора скобок с параметрами и двоеточия. Параметры
в скобках необязательны. А со следующей строки идет блок
инструкций, которые выполняет функция. Все инструкции функции
имеют отступы от начала строки.
Например, определение простейшей функции:
def say_hello():
print("Hello")
Функция называется say_hello. Она не имеет параметров и содержит
одну единственную инструкцию, которая выводит на консоль строку
"Hello".
Для вызова функции указывается имя функции, после которого в
скобках идет передача значений для всех ее параметров. Например:
def say_hello():
print("Hello")
say_hello()
say_hello()
say_hello()
Здесь три раза подряд вызывается функция say_hello. В итоге мы
получим следующий консольный вывод:
Hello
Hello
Hello
Теперь определим и используем функцию с параметрами:
def say_hello(name):
print("Hello,",name)
say_hello("Tom")
say_hello("Bob")
say_hello("Alice")
Функция принимает параметр name, и при вызове функции мы можем
передать вместо параметра какой-либо значение:
Hello, Tom
Hello, Bob
Hello, AliceЗначения по умолчанию
Некоторые параметры функции мы можем сделать необязательными,
указав для них значения по умолчанию при определении функции.
Например:
def say_hello(name="Tom"):
print("Hello,", name)
say_hello()
say_hello("Bob")
Здесь параметр name является необязательным. И если мы не передаем
при вызове функции для него значение, то применяется значение по
умолчанию, то есть строка "Tom".
Именованные параметры
При передаче значений функция сопоставляет их с параметрами в том
порядке, в котором они передаются. Например, пусть есть следующая
функция:
def display_info(name, age):
print("Name:", name, "\t", "Age:", age)
display_info("Tom", 22)
При вызове функции первое значение "Tom" передается первому
параметру - параметру name, второе значение - число 22 передается
второму параметру - age. И так далее по порядку. Использование
именованных параметров позволяет переопределить порядок передачи:
def display_info(name, age):
print("Name:", name, "\t", "Age:", age)
display_info(age=22, name="Tom")
Именованные параметры предполагают указание имени параметра с
присвоением ему значения при вызове функции.
Неопределенное количество параметров
С помощью символа звездочки можно определить неопределенное
количество параметров:
def sum(*params):
result = 0
for n in params:
result += n
return result
sumOfNumbers1 = sum(1, 2, 3, 4, 5) # 15
sumOfNumbers2 = sum(3, 4, 5, 6) # 18print(sumOfNumbers1)
print(sumOfNumbers2)
В данном случае функция sum принимает один параметр - *params, но
звездочка перед названием параметра указывает, что фактически на
место этого параметра мы можем передать неопределенное количество
значений или набор значений. В самой функции с помощью цикла for
можно пройтись по этому набору и произвести с переданными
значениями различные действия. Например, в данном случае
возвращается сумма чисел.
Возвращение результата
Функция может возвращать результат. Для этого в функции
используется оператор return, после которого указывается
возвращаемое значение:
def exchange(usd_rate, money):
result = round(money/usd_rate, 2)
return result
result1 = exchange(60, 30000)
print(result1)
result2 = exchange(56, 30000)
print(result2)
result3 = exchange(65, 30000)
print(result3)
Поскольку функция возвращает значение, то мы можем присвоить это
значение какой-либо переменной и затем использовать ее: result2 =
exchange(56, 30000).
В Python функция может возвращать сразу несколько значений:
def create_default_user():
name = "Tom"
age = 33
return name, age
user_name, user_age = create_default_user()
print("Name:", user_name, "\t Age:", user_age)
Здесь функция create_default_user возвращает два значения: name и
age. При вызове функции эти значения по порядку присваиваются
переменным user_name и user_age, и мы их можем использовать.
Функция main
В программе может быть определено множество функций. И чтобы всех
их упорядочить, хорошей практикой считается добавление специальной
функции main, в которой потом уже вызываются другие функции:def main():
say_hello("Tom")
usd_rate = 56
money = 30000
result = exchange(usd_rate, money)
print("К выдаче", result, "долларов")
def say_hello(name):
print("Hello,", name)
def exchange(usd_rate, money):
result = round(money/usd_rate, 2)
return result
# Вызов функции main
main()
Область видимости или scope определяет контекст переменной, в
рамках которого ее можно использовать. В Python есть два типа
контекста: глобальный и локальный.
Глобальный контекст подразумевает, что переменная является
глобальной, она определена вне любой из функций и доступна любой
функции в программе. Например:
name = "Tom"
def say_hi():
print("Hello", name)
def say_bye():
print("Good bye", name)
say_hi()
say_bye()
Здесь переменная name является глобальной и имеет глобальную
область видимости. И обе определенные здесь функции могут свободно
ее использовать.В отличие от глобальных переменных локальная переменная
определяется внутри функции и доступна только из этой функции, то
есть имеет локальную область видимости:
def say_hi():
name = "Sam"
surname = "Johnson"
print("Hello", name, surname)
def say_bye():
name = "Tom"
print("Good bye", name)
say_hi()
say_bye()
В данном случае в каждой из двух функций определяется локальная
переменная name. И хотя эти переменные называются одинаково, но
тем не менее это дву разных переменных, каждая из которых доступна
только в рамках своей функции. Также в функции say_hi определена
переменная surname, которая также является локальной, поэтому в
функции say_bye мы ее использовать не сможем.
Есть еще один вариант определения переменной, когда локальная
переменная скрывают глобальную с тем же именем:
name = "Tom"
def say_hi():
print("Hello", name)
def say_bye():
name = "Bob"
print("Good bye", name)
say_hi() # Hello Tom
say_bye() # Good bye Bob
Здесь определена глобальная переменная name. Однако в функции
say_bye определена локальная переменная с тем же именем name. И
если функция say_hi использует глобальную переменную, то функция
say_bye использует локальную переменную, которая скрывает
глобальную.Если же мы хотим изменить в локальной функции глобальную
переменную, а не определить локальную, то необходимо использовать
ключевое слово global:
def say_bye():
global name
name = "Bob"
print("Good bye", name)
В Python, как и во многих других языках программирования, не
рекомендуется использовать глобальные переменные. Единственной
допустимой практикой является определение небольшого числа
глобальных констант, которые не изменяются в процессе работы
программы.
PI = 3.14
# вычисление площади круга
def get_circle_square(radius):
print("Площадь круга с радиусом", radius, "равна", PI * radius
* radius)
get_circle_square(50)
В данном случае число 3.14 представлено константой PI. Понятно,
что это значение в принципе не изменится, поэтому его можно
вынести из функций и определить в виде константы. Как правило, имя
константы определяется заглавными буквами.Самостоятельная работа
1. Дана программа. Необходимо выделить часть кода, которая
отвечает за перевод числа из десятичной в двоичную систему
счисления в отдельную функцию, например с названием perevod.
1.a Осуществить передачу параметра в функцию через глобальную
переменную
1.b Осуществить передачу параметра в функцию через параметр
#! Перевод из десятичной системы счислений в двоичную
while True:
sint=input("Введите число (или q для выхода): ")
if sint.lower() == 'q':
break;
s2=''
t10=int(sint)
while t10>0:
s2=str(t10 % 2)+s2
t10=t10 // 2
print(sint, '=', s2)
print('конец')
2. Дана программа. Необходимо выделить часть кода, которая
отвечает за вычисление значения функции Y и описать отдельную
функцию с параметром x, например fx(x), с этим кодом.
2.a Выполнить вывод значений прямо в функции
2.b Выполнить возврат двух значений из функции x и y; осуществить
их вывод в цикле
Условия функции Y, на интервале [-10;10]
y = x2 при -5 <= x <= 5;
y = 2*|x|-1 при x < -5;
y = 2x при x > 5.
#! Перевод из десятичной в двоичную
print('x \t y')
for x in range(-10,11):
y=0
if x<-5:
y=2*abs(x)-1
elif x>5:
y=2*x
else:
y=x*x
print(x,'\t',y)
print('конец')
