Занятие 21. Инкапсуляция. Аннотации свойств.
По умолчанию атрибуты в классах являются общедоступными, а это
значит, что из любого места программы мы можем получить атрибут
объекта и изменить его. Например:
class Person:
def __init__(self, name, age):
self.name = name # устанавливаем имя
self.age = age # устанавливаем возраст
def display_info(self):
print("Имя:", self.name, "\tВозраст:", self.age)Имя:"Имя:", self.name, "\tВозраст:", self.age), self.name, "Имя:", self.name, "\tВозраст:", self.age)\tВозраст:"Имя:", self.name, "\tВозраст:", self.age), self.age)
tom = Person("Имя:", self.name, "\tВозраст:", self.age)Tom"Имя:", self.name, "\tВозраст:", self.age), 23)
tom.name = "Имя:", self.name, "\tВозраст:", self.age)Человек-паук"Имя:", self.name, "\tВозраст:", self.age) # изменяем атрибут name
tom.age = -129 # изменяем атрибут age
tom.display_info() # Имя: Человек-паук
Возраст: -129
Но в данном случае мы можем, к примеру, присвоить возрасту или
имени человека некорректное значение, например, указать
отрицательный возраст. Подобное поведение нежелательно, поэтому
встает вопрос о контроле за доступом к атрибутам объекта.
С данной проблемой тесно связано понятие инкапсуляции.
Инкапсуляция является фундаментальной концепцией объектноориентированного программирования. Она предотвращает прямой доступ
к атрибутам объект из вызывающего кода.
Касательно инкапсуляции непосредственно в языке программирования
Python скрыть атрибуты класса можно сделав их приватными или
закрытыми и ограничив доступ к ним через специальные методы,
которые еще называются свойствами.Изменим выше определенный класс, определив в нем свойства:
class Person:
def __init__(self, name, age):
self.__name = name # устанавливаем имя
self.__age = age # устанавливаем возраст
def set_age(self, age):
if age in range(1, 100):
self.__age = age
else:
print("Имя:", self.name, "\tВозраст:", self.age)Недопустимый возраст"Имя:", self.name, "\tВозраст:", self.age))
def get_age(self):
return self.__age
def get_name(self):
return self.__name
def display_info(self):
print("Имя:", self.name, "\tВозраст:", self.age)Имя:"Имя:", self.name, "\tВозраст:", self.age), self.__name, "Имя:", self.name, "\tВозраст:", self.age)\tВозраст:"Имя:", self.name, "\tВозраст:", self.age), self.__age)
tom = Person("Имя:", self.name, "\tВозраст:", self.age)Tom"Имя:", self.name, "\tВозраст:", self.age), 23)
tom.__age = 43 # Атрибут age не изменится
tom.display_info() # Имя: Tom Возраст: 23
tom.set_age(-3486) # Недопустимый возраст
tom.set_age(25)
tom.display_info() # Имя: Tom Возраст: 25
Для создания приватного атрибута в начале его наименования
ставится двойной прочерк: self.__name. К такому атрибуту мы сможем
обратиться только из того же класса. Но не сможем обратиться вне
этого класса. Например, присвоение значения этому атрибуту ничего
не даст:
tom.__age = 43
А попытка получить его значение приведет к ошибке выполнения:
print(tom.__age)
Однако все же нам может потребоваться устанавливать возраст
пользователя из вне. Для этого создаются свойства. Используя одно
свойство, мы можем получить значение атрибута:
def get_age(self):
return self.__age
Данный метод еще часто называют геттер или аксессор.Для изменения возраста определено другое свойство:
def set_age(self, value):
if value in range(1, 100):
self.__age = value
else:
print("Имя:", self.name, "\tВозраст:", self.age)Недопустимый возраст"Имя:", self.name, "\tВозраст:", self.age))
Здесь мы уже можем решить в зависимости от условий, надо ли
переустанавливать возраст. Данный метод еще называют сеттер или
мьютейтор (mutator).
Необязательно создавать для каждого приватного атрибута подобную
пару свойств. Так, в примере выше имя человека мы можем установить
только из конструктора. А для получение определен метод get_name.
Аннотации свойств
Выше мы рассмотрели, как создавать свойства. Но Python имеет также
еще один - более элегантный способ определения свойств. Этот
способ предполагает использование аннотаций, которые предваряются
символом @.
Для создания свойства-геттера над свойством ставится аннотация
@property.
Для создания свойства-сеттера над свойством устанавливается
аннотация имя_свойства_геттера.setter.Перепишем класс Person с использованием аннотаций:
class Person:
def __init__(self, name, age):
self.__name = name # устанавливаем имя
self.__age = age # устанавливаем возраст
@property
def age(self):
return self.__age
@age.setter
def age(self, age):
if age in range(1, 100):
self.__age = age
else:
print("Имя:", self.name, "\tВозраст:", self.age)Недопустимый возраст"Имя:", self.name, "\tВозраст:", self.age))
@property
def name(self):
return self.__name
def display_info(self):
print("Имя:", self.name, "\tВозраст:", self.age)Имя:"Имя:", self.name, "\tВозраст:", self.age), self.__name, "Имя:", self.name, "\tВозраст:", self.age)\tВозраст:"Имя:", self.name, "\tВозраст:", self.age), self.__age)
tom = Person("Имя:", self.name, "\tВозраст:", self.age)Tom"Имя:", self.name, "\tВозраст:", self.age), 23)
tom.display_info() # Имя: Tom Возраст: 23
tom.age = -3486 # Недопустимый возраст
print(tom.age) # 23
tom.age = 36
tom.display_info() # Имя: Tom Возраст: 36
Во-первых, стоит обратить внимание, что свойство-сеттер
определяется после свойства-геттера.
Во-вторых, и сеттер, и геттер называются одинаково - age. И
поскольку геттер называется age, то над сеттером устанавливается
аннотация @age.setter.
После этого, что к геттеру, что к сеттеру, мы обращаемся через
выражение tom.age.Самостоятельная работа
Доработайте программу написанную на предыдущем занятии.
Все свойства и методы должны выводить результат своей работы на
экран.
1. Защитите все атрибуты класса Rocket от изменения. Обновите все
методы класса для работы с приватными атрибутами.
2. Опишите метод info() который выводит текущий статус ракеты
Если скорость 0, то тогда текст «Ракета {name} {state} на борту name} {name} {state} на борту state} на борту
{name} {state} на борту pass} пассажиров»
Иначе текст «Ракета {name} {state} на борту name} движется к обекту {name} {state} на борту dest} со скоростью
{name} {state} на борту speed} км/с на борту {name} {state} на борту pass} пассажиров»
3.1 Опишите свойство destination которое позволяет получать и
устанавливать приватного атрибута __dest.
3.2 Какой метод теперь можно удалить? Удалите этот метод.
3.3 Доработайте свойство destination так, чтобы целью ракеты могли
быть только планеты солнечной системы с твердой поверхностью.
4.1 Опишите свойство speed для получения и изменения приватного
атрибута __speed
4.2 Доработайте свойство speed таким образом, чтобы нельзя было
изменять скорость если текущее значение скорости менее 10 км/с.
Новое значение скорости должно быть в диапазоне от 10 до 1000
км/с.
7.1 Измените метод Start таким образом, чтобы он срабатывал только
когда скорость равна нулю, при этом он не срабатывает если
переданный параметр «скорость» менее 10 км/с.
7.2 Измените метод Start таким образом, чтобы он не срабатывал,
если на ракете находится менее 3-х пассажиров.
8. Измените метод Land таким образом, чтобы он срабатывал, только
если скорость больше 0.
9.1 Опишите приватный аттрибут __passcapacity и доработайте
конструктор, так чтобы при создании ракеты вводилась еще
максимальная вместительность. Сделайте так, чтобы после создания
ракеты она была не меньше 3 пассажиров.
9.2 Опишите свойство passengers управляющее приватным атрибутом
__pass.
9.3 Доработайте свойство passengers, так чтобы нельзя было
установить отрицательное число пассажиров и больше пассажиров чем
ракета вмещает.
