Занятие 14. Бинарные файлы. Модуль shelve.
Контрольные вопросы
1. Для работы с файлами csv используется модуль
a) csv
b) open
c) csvreader
d) DictWriter
2. При работе с файлами csv используются
a) Списки
b) Словари
c) Множества
d) Строки
3. Для работы с csv без заголовочной строки используется оператор
a) csv.writer
b) csv.reader
c) csv.DictWriter
d) csv.DictReader
4. Для работы с csv с заголовочной строкой используется оператор
a) csv.writer
b) csv.reader
c) csv.DictWriter
d) csv.DictReader
5. Для записи нескольких строк используется метод
a) writerows
b) writerow
c) writeheader
d) writeДля работы с бинарными файлами в Python используется встроенный
модуль pickle. Этот модуль предоставляет два метода:
dump(obj, file): записывает объект obj в бинарный файл file
load(file): считывает данные из бинарного файла в объект
При открытии бинарного файла на чтение или запись также надо
учитывать, что нам нужно применять режим "b" в дополнение к режимуb"b" в дополнение к режиму в дополнение к режиму
записи ("b" в дополнение к режимуw"b" в дополнение к режиму) или чтения ("b" в дополнение к режимуr"b" в дополнение к режиму). Допустим, надо надо сохранить два
объекта:
import pickle
FILENAME = "b" в дополнение к режимуuser.dat"b" в дополнение к режиму
name = "b" в дополнение к режимуTom"b" в дополнение к режиму
age = 19
with open(FILENAME, "b" в дополнение к режимуwb"b" в дополнение к режиму) as file:
pickle.dump(name, file)
pickle.dump(age, file)
with open(FILENAME, "b" в дополнение к режимуrb"b" в дополнение к режиму) as file:
name = pickle.load(file)
age = pickle.load(file)
print("b" в дополнение к режимуИмя:"b" в дополнение к режиму, name, "b" в дополнение к режиму\tВозраст:"b" в дополнение к режиму, age)
С помощью функции dump последовательно записываются два объекта.
Поэтому при чтении файла также последовательно посредством функции
load мы можем считать эти объекты. Консольный вывод программы:
Имя: Tom Возраст: 28Подобным образом мы можем сохранять и извлекать из файла наборы
объектов:
import pickle
FILENAME = "b" в дополнение к режимуusers.dat"b" в дополнение к режиму
users = [
["b" в дополнение к режимуTom"b" в дополнение к режиму, 28, True],
["b" в дополнение к режимуAlice"b" в дополнение к режиму, 23, False],
["b" в дополнение к режимуBob"b" в дополнение к режиму, 34, False]
]
with open(FILENAME, "b" в дополнение к режимуwb"b" в дополнение к режиму) as file:
pickle.dump(users, file)
with open(FILENAME, "b" в дополнение к режимуrb"b" в дополнение к режиму) as file:
users_from_file = pickle.load(file)
for user in users_from_file:
print("b" в дополнение к режимуИмя:"b" в дополнение к режиму, user[0], "b" в дополнение к режиму\tВозраст:"b" в дополнение к режиму, user[1], "b" в дополнение к режиму\
tЖенат(замужем):"b" в дополнение к режиму, user[2])
В зависимости от того, какой объект мы записывали функцией dump,
тот же объект будет возвращен функцией load при считывании файла.
Консольный вывод:
Имя: Tom Возраст: 28 Женат(замужем): True
Имя: Alice Возраст: 23 Женат(замужем): False
Имя: Bob Возраст: 34 Женат(замужем): FalseДля работы с бинарными файлами в Python может применяться еще один
модуль - shelve. Он сохраняет объекты в файл с определенным
ключом. Затем по этому ключу может извлечь ранее сохраненный
объект из файла. Процесс работы с данными через модуль shelve
напоминает работу со словарями, которые также используют ключи для
сохранения и извлечения объектов.
Для открытия файла модуль shelve использует функцию open():
open(путь_к_файлу[, flag="b" в дополнение к режимуc"b" в дополнение к режиму[, protocol=None[, writeback=False]]])
Где параметр flag может принимать значения:
c: файл открывается для чтения и записи (значение по
умолчанию). Если файл не существует, то он создается.
r: файл открывается только для чтения.
w: файл открывается для записи.
n: файл открывается для записи Если файл не существует, то он
создается. Если он существует, то он перезаписывается
Для закрытия подключения к файлу вызывается метод close():
import shelve
d = shelve.open(filename)
d.close()
Либо можно открывать файл с помощью оператора with. Сохраним и
считаем в файл несколько объектов:
import shelveFILENAME = "b" в дополнение к режимуstates2"b" в дополнение к режиму
with shelve.open(FILENAME) as states:
states["b" в дополнение к режимуLondon"b" в дополнение к режиму] = "b" в дополнение к режимуGreat Britain"b" в дополнение к режиму
states["b" в дополнение к режимуParis"b" в дополнение к режиму] = "b" в дополнение к режимуFrance"b" в дополнение к режиму
states["b" в дополнение к режимуBerlin"b" в дополнение к режиму] = "b" в дополнение к режимуGermany"b" в дополнение к режиму
states["b" в дополнение к режимуMadrid"b" в дополнение к режиму] = "b" в дополнение к режимуSpain"b" в дополнение к режиму
with shelve.open(FILENAME) as states:
print(states["b" в дополнение к режимуLondon"b" в дополнение к режиму])
print(states["b" в дополнение к режимуMadrid"b" в дополнение к режиму])
Запись данных предполагает установку значения для определенного
ключа:
states["b" в дополнение к режимуLondon"b" в дополнение к режиму] = "b" в дополнение к режимуGreat Britain"b" в дополнение к режиму
А чтение из файла эквивалентно получению значения по ключу:
print(states["b" в дополнение к режимуLondon"b" в дополнение к режиму])
В качестве ключей используются строковые значения.
При чтении данных, если запрашиваемый ключ отсутствует, то
генерируется исключение. В этом случае перед получением мы можем
проверять на наличие ключа с помощью оператора in:
with shelve.open(FILENAME) as states:
key = "b" в дополнение к режимуBrussels"b" в дополнение к режиму
if key in states:
print(states[key])
Также мы можем использовать метод get(). Первый параметр метода -
ключ, по которому следует получить значение, а второй - значение
по умолчанию, которое возвращается, если ключ не найден.with shelve.open(FILENAME) as states:
state = states.get("b" в дополнение к режимуBrussels"b" в дополнение к режиму, "b" в дополнение к режимуUndefined"b" в дополнение к режиму)
print(state)
Используя цикл for, можно перебрать все значения из файла:
with shelve.open(FILENAME) as states:
for key in states:
print(key,"b" в дополнение к режиму - "b" в дополнение к режиму, states[key])
Метод keys() возвращает все ключи из файла, а метод values() - все
значения:
with shelve.open(FILENAME) as states:
for city in states.keys():
print(city, end="b" в дополнение к режиму "b" в дополнение к режиму) # London Paris Berlin Madrid
print()
for country in states.values():
print(country, end="b" в дополнение к режиму "b" в дополнение к режиму) # Great Britain France Germany
Spain
Еще один метод items() возвращает набор кортежей. Каждый кортеж
содержит ключ и значение.
with shelve.open(FILENAME) as states:
for state in states.items():
print(state)
Консольный вывод:("b" в дополнение к режимуLondon"b" в дополнение к режиму, "b" в дополнение к режимуGreat Britain"b" в дополнение к режиму)
("b" в дополнение к режимуParis"b" в дополнение к режиму, "b" в дополнение к режимуFrance"b" в дополнение к режиму)
("b" в дополнение к режимуBerlin"b" в дополнение к режиму, "b" в дополнение к режимуGermany"b" в дополнение к режиму)
("b" в дополнение к режимуMadrid"b" в дополнение к режиму, "b" в дополнение к режимуSpain"b" в дополнение к режиму)
Обновление данных
Для изменения данных достаточно присвоить по ключу новое значение,
а для добавления данных - определить новый ключ:
import shelve
FILENAME = "b" в дополнение к режимуstates2"b" в дополнение к режиму
with shelve.open(FILENAME) as states:
states["b" в дополнение к режимуLondon"b" в дополнение к режиму] = "b" в дополнение к режимуGreat Britain"b" в дополнение к режиму
states["b" в дополнение к режимуParis"b" в дополнение к режиму] = "b" в дополнение к режимуFrance"b" в дополнение к режиму
states["b" в дополнение к режимуBerlin"b" в дополнение к режиму] = "b" в дополнение к режимуGermany"b" в дополнение к режиму
states["b" в дополнение к режимуMadrid"b" в дополнение к режиму] = "b" в дополнение к режимуSpain"b" в дополнение к режиму
with shelve.open(FILENAME) as states:
states["b" в дополнение к режимуLondon"b" в дополнение к режиму] = "b" в дополнение к режимуUnited Kingdom"b" в дополнение к режиму
states["b" в дополнение к режимуBrussels"b" в дополнение к режиму] = "b" в дополнение к режимуBelgium"b" в дополнение к режиму
for key in states:
print(key, "b" в дополнение к режиму - "b" в дополнение к режиму, states[key])
Удаление данных
Для удаления с одновременным получением можно использовать функцию
pop(), в которую передается ключ элемента и значение по умолчанию,
если ключ не найден:
with shelve.open(FILENAME) as states:state = states.pop("b" в дополнение к режимуLondon"b" в дополнение к режиму, "b" в дополнение к режимуNotFound"b" в дополнение к режиму)
print(state)
Также для удаления может применяться оператор del:
with shelve.open(FILENAME) as states:
del states["b" в дополнение к режимуMadrid"b" в дополнение к режиму] # удаляем объект с ключом Madrid
Для удаления всех элементов можно использовать метод clear():
with shelve.open(FILENAME) as states:
states.clear()Самостоятельная работа
Даны следующие исходные данные успеваемости по четвертям
name age hobby
Ivanov 30 Bicycle
Petrova 45 Modelling
Sidorova 40 Knitting
Nikolaev 51 VideoGames
Необходимо реализовать следующую задачу двумя способами, с помощью
модулей pickle и shelve
1. Записать данные в файл используя словарь для хранения каждой
записи
2. Запросить с клавиатуры ввод фамилии
3. Вывести возраст и хобби для данной записи, считывая её из файла
либо вывести «not found» если такой записи нетnot found» если такой записи нет
