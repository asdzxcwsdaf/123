Занятие 6. Модули.
Контрольные вопросы
1. Как описывается функция в python
а) function имя_функции ([параметры]):
б) def имя_функции ([параметры]):
в) while имя_функции ([параметры]):
г) range имя_функции ([параметры]):
2. Команды предназначенные для выполнения в функции
а) записываются без отступа
б) записываются с отступом
в) записываются в фигурных скобках {}
г) обрамляются служебными словами begin и end
3. Для возвращения значения функции используется служебное слово
а) range
б) result
в) def
г) return
4. Для возвращения нескольких результатов функцией, они
записываются
а) через пробел
б) через точку с запятой
в) через запятую
г) функция может возвращать только одно значение
5. Глобальные переменные описываются
а) в тексте программы без отступа
б) с помощью служебного слова global
в) в тексте программы с небольшим отступом
г) с помощью служебного слова public
6. Локальные переменные описываются
а) в тексте программы с небольшим отступом
б) с помощью служебного слова static
в) внутри функций
г) с помощью служебного слова private
7. Использование глобальных переменных
а) Крайне желательно
б) Крайне нежелательно
в) Рекомендуется избегать
г) Не регламентированоМодуль в языке Python представляет отдельный файл с кодом, который
можно повторно использовать в других программах.
Для создания модуля необходимо создать собственно файл с
расширением *.py, который будет представлять модуль. Название
файла будет представлять название модуля. Затем в этом файле надо
определить одну или несколько функций.
Пусть основной файл программы будет называться hello.py. И мы
хотим подключить к нему внешние модули.
Для этого сначала определим новый модуль: создадим новый файл,
который назовем account.py, в той же папке, где находится
hello.py. Если используется PyCharm или другая IDE, то оба файла
просто помещаются в один проект.
Модули в Python
Соответственно модуль будет называться account. И определим в нем
следующий код:def calculate_income(rate, money, month):
if money <= 0:
return 0
for i in range(1, month+1):
money = round(money + money * rate / 100 / 12, 2)
return money
Здесь определена функция calculate_income, которая в качестве
параметров получает процентную ставку вклада, сумму вклада и
период, на который делается вклад, и высчитывает сумму, которая
получится в конце данного периода.
В файле hello.py используем данный модуль:
#! Программа Банковский счет
import account
rate = int(input("Введите процентную ставку: "))Введите процентную ставку: "Введите процентную ставку: "))))
money = int(input("Введите процентную ставку: "))Введите сумму: "Введите процентную ставку: "))))
period = int(input("Введите процентную ставку: "))Введите период ведения счета в месяцах: "Введите процентную ставку: "))))
result = account.calculate_income(rate, money, period)
print("Введите процентную ставку: "))Параметры счета:\n", "Сумма: ", money, "\n", "Ставка: ", n"Введите процентную ставку: ")), "Введите процентную ставку: "))Сумма: "Введите процентную ставку: ")), money, "Введите процентную ставку: "))\n", "Сумма: ", money, "\n", "Ставка: ", n"Введите процентную ставку: ")), "Введите процентную ставку: "))Ставка: "Введите процентную ставку: ")),
rate, "Введите процентную ставку: "))\n", "Сумма: ", money, "\n", "Ставка: ", n"Введите процентную ставку: ")),
"Введите процентную ставку: "))Период: "Введите процентную ставку: ")), period, "Введите процентную ставку: "))\n", "Сумма: ", money, "\n", "Ставка: ", n"Введите процентную ставку: ")), "Введите процентную ставку: "))Сумма на счете в конце
периода: "Введите процентную ставку: ")), result)
Для использования модуля его надо импортировать с помощью
оператора import, после которого указывается имя модуля: import
account.Чтобы обращаться к функциональности модуля, нам нужно получить его
пространство имен. По умолчанию оно будет совпадать с именем
модуля, то есть в нашем случае также будет называться account.
Получив пространство имен модуля, мы сможем обратиться к его
функциям по схеме пространство_имен.функция:
account.calculate_income(rate, money, period)
И после этого мы можем запустить главный скрипт hello.py, и он
задействует модуль account.py. В частности, консольный вывод мог
бы быть следующим:
Введите процентную ставку: 10
Введите сумму: 300000
Введите период ведения счета в месяцах: 6
Параметры счета:
Сумма: 300000
Ставка: 10
Период: 6
Сумма на счете в конце периода: 315315.99
Настройка пространства имен
По умолчанию при импорте модуля он доступен через одноименное
пространство имен. Однако мы можем переопределить это поведение.
Так, ключевое слово as позволяет сопоставить модуль с другим
пространством имен. Например:
import account as acc
#...............
result = acc.calculate_income(rate, money, period)В данном случае пространство имен будет называться acc.
Другой вариант настройки предполагает импорт функциональности
модуля в глобальное пространство имен текущего модуля с помощью
ключевого слова from:
from account import calculate_income
#...............
result = calculate_income(rate, money, period)
В данном случае мы импортируем из модуля account в глобальное
пространство имен функцию calculate_income. Поэтому мы сможем ее
использовать без указания пространства имен модуля как если бы она
была определена в этом же файле.
Если бы в модуле account было бы несколько функций, то могли бы их
импортировать в глобальное пространство имен одним выражением:
from account import *
#...............
result = calculate_income(rate, money, period)
Но стоит отметить, что импорт в глобальное пространство имен
чреват коллизиями имен функций. Например, если у нас том же файле
определена функция с тем же именем, то при вызове функции мы можем
получить ошибку. Поэтому лучше избегать использования импорта в
глобальное пространство имен.
Имя модуля
В примере выше модуль hello.py, который является главным,
использует модуль account.py. При запуске модуля hello.py
программа выполнит всю необходимую работу. Однако, если мызапустим отдельно модуль account.py сам по себе, то ничего на
консоли не увидим. Ведь модуль просто определяет функцию и
невыполняет никаких других действий. Но мы можем сделать так,
чтобы модуль account.py мог использоваться как сам по себе, так и
подключаться в другие модули.
При выполнении модуля среда определяет его имя и присваивает его
глобальной переменной __name__ (с обеих сторон два подчеркивания).
Если модуль является запускаемым, то его имя равно __main__ (также
по два подчеркивания с каждой стороны). Если модуль используется в
другом модуле, то в момент выполнения его имя аналогично названию
файла без расширения py. И мы можем это использовать. Так, изменим
содержимое файла account.py:
def calculate_income(rate, money, month):
if money <= 0:
return 0
for i in range(1, month+1):
money = round(money + money * rate / 100 / 12, 2)
return money
def main():
rate = 10
money = 100000
period = 12
result = calculate_income(rate, money, period)
print("Введите процентную ставку: "))Параметры счета:\n", "Сумма: ", money, "\n", "Ставка: ", n"Введите процентную ставку: ")), "Введите процентную ставку: "))Сумма: "Введите процентную ставку: ")), money, "Введите процентную ставку: "))\n", "Сумма: ", money, "\n", "Ставка: ", n"Введите процентную ставку: ")), "Введите процентную ставку: "))Ставка:
"Введите процентную ставку: ")), rate, "Введите процентную ставку: "))\n", "Сумма: ", money, "\n", "Ставка: ", n"Введите процентную ставку: ")),
"Введите процентную ставку: "))Период: "Введите процентную ставку: ")), period, "Введите процентную ставку: "))\n", "Сумма: ", money, "\n", "Ставка: ", n"Введите процентную ставку: ")), "Введите процентную ставку: "))Сумма на счете в конце
периода: "Введите процентную ставку: ")), result)
if __name__=="Введите процентную ставку: "))__main__"Введите процентную ставку: ")):
main()Кроме того, для тестирования функции определена главная функция
main. И мы можем сразу запустить файл account.py отдельно от всех
и протестировать код.
Следует обратить внимание на вызов функции main:
if __name__=="Введите процентную ставку: "))__main__"Введите процентную ставку: ")):
main()
Переменная __name__ указывает на имя модуля. Для главного модуля,
который непосредственно запускается, эта переменная всегда будет
иметь значение __main__ вне зависимости от имени файла.
Поэтому, если мы будем запускать скрипт account.py отдельно, сам
по себе, то Python присвоит переменной __name__ значение __main__,
далее в выражении if вызовет функцию main из этого же файла.
Однако если мы будем запускать другой скрипт, а этот - account.py
- будем подключать в качестве вспомогательного, для account.py
переменная __name__ будет иметь значение account. И соответственно
метод main в файле account.py не будет работать.
Данный подход с проверкой имени модуля является более
рекомендуемым подходом, чем просто вызов метода main.
В файле hello.py также можно сделать проверку на то, является ли
модуль главным (хотя в прицнипе это необязательно):#! Программа Банковский счет
import account
def main():
rate = int(input("Введите процентную ставку: "))Введите процентную ставку: "Введите процентную ставку: "))))
money = int(input("Введите процентную ставку: "))Введите сумму: "Введите процентную ставку: "))))
period = int(input("Введите процентную ставку: "))Введите период ведения счета в месяцах:
"Введите процентную ставку: "))))
result = account.calculate_income(rate, money, period)
print("Введите процентную ставку: "))Параметры счета:\n", "Сумма: ", money, "\n", "Ставка: ", n"Введите процентную ставку: ")), "Введите процентную ставку: "))Сумма: "Введите процентную ставку: ")), money, "Введите процентную ставку: "))\n", "Сумма: ", money, "\n", "Ставка: ", n"Введите процентную ставку: ")), "Введите процентную ставку: "))Ставка:
"Введите процентную ставку: ")), rate, "Введите процентную ставку: "))\n", "Сумма: ", money, "\n", "Ставка: ", n"Введите процентную ставку: ")),
"Введите процентную ставку: "))Период: "Введите процентную ставку: ")), period, "Введите процентную ставку: "))\n", "Сумма: ", money, "\n", "Ставка: ", n"Введите процентную ставку: ")), "Введите процентную ставку: "))Сумма на счете в конце
периода: "Введите процентную ставку: ")), result)
if __name__ == "Введите процентную ставку: "))__main__"Введите процентную ставку: ")):
main()Самостоятельная работа
Дана программа по переводу из десятичной системы счисления в
двоичную
Необходимо выделить код для перевода в отдельную функцию, которую
разместить в отдельный модуль. Например модуль convert.py
Реализовать модуль convert.py таким образом, чтобы если его
запустить отдельно, то один раз запрашивалось значение с
клавиатуры и проводилось преобразование.
Подключить модуль в основную программу и сделать вызов функции из
этого модуля, любым удобным способом. Так чтобы программа
продолжила работать в том же режиме, что и исходный код.
#! Перевод из десятичной системы счислений в двоичную
while True:
sint=input("Введите процентную ставку: "))Введите число (или q для выхода): "Введите процентную ставку: ")))
if sint.lower() == 'q':
break;
s2=''
t10=int(sint)
while t10>0:
s2=str(t10 % 2)+s2
t10=t10 // 2
print(sint, '=', s2)
print('конец')
