Занятие 17. Основные методы строк. Поиск в строке. Замена в
строке. Разделение на подстроки. Соединение строк.
Контрольные вопросы
1. В какой кодировке хранятся строки в python:
a) utf-8
b) utf-16
c) cp1251
d) koi8-r
2. Можно ли заменить символ строки используя оператор []
a) можно
b) только используя положительный индекс
c) только используя отрицательный индекс
d) нельзя
3. Функция ord(c)
a) переводит символ c в число
b) возвращает код символа c
c) возвращает первый символ строки
d) возвращает последний символ строки
4. Выражение term in string
a) возвращает позицию term в строке string
b) проверяет вхождение term в строке string
c) помещает trem в строку stirng
d) извлекает term из строки string
5. Длину строки s можно получить с помощью следующей записи
a) len(s)
b) length(s)
c) s.len()
d) s.len
6. Какая запись вернёт последний символ a строки s="abababa"
a) s[-1]
b) s[len(s)-1]
c) s[0]
d) s[2]Рассмотрим основные методы строк, которые мы можем применить в
приложениях:
isalpha(str): возвращает True, если строка состоит только из
алфавитных символов
islower(str): возвращает True, если строка состоит только из
символов в нижнем регистре
isupper(str): возвращает True, если все символы строки в
верхнем регистре
isdigit(str): возвращает True, если все символы строки - цифры
isnumeric(str): возвращает True, если строка представляет
собой число
startwith(str): возвращает True, если строка начинается с
подстроки str
endwith(str): возвращает True, если строка заканчивается на
подстроку str
lower(): переводит строку в нижний регистр
upper(): переводит строку в вехний регистр
title(): начальные символы всех слов в строке переводятся в
верхний регистр
capitalize(): переводит в верхний регистр первую букву только
самого первого слова строки
lstrip(): удаляет начальные пробелы из строкиrstrip(): удаляет конечные пробелы из строки
strip(): удаляет начальные и конечные пробелы из строки
ljust(width): если длина строки меньше параметра width, то
справа от строки добавляются пробелы, чтобы дополнить значение
width, а сама строка выравнивается по левому краю
rjust(width): если длина строки меньше параметра width, то
слева от строки добавляются пробелы, чтобы дополнить значение
width, а сама строка выравнивается по правому краю
center(width): если длина строки меньше параметра width, то
слева и справа от строки равномерно добавляются пробелы, чтобы
дополнить значение width, а сама строка выравнивается по центру
find(str[, start [, end]): возвращает индекс подстроки в
строке. Если подстрока не найдена, возвращается число -1
replace(old, new[, num]): заменяет в строке одну подстроку на
другую
split([delimeter[, num]]): разбивает строку на подстроки в
зависимости от разделителя
join(strs): объединяет строки в одну строку, вставляя между
ними определенный разделитель
Например, если мы ожидаем ввод с клавиатуры числа, то перед
преобразованием введенной строки в число можно проверить, с
помощью метода isnumeric() введено ли в действительности число, и
если так, то выполнить операцию преобразования:
string = input("Введите число: ")
if string.isnumeric():
number = int(string)print(number)
Проверка, начинается или оканчивается строка на определенную
подстроку:
file_name = "hello.py"
starts_with_hello = file_name.startswith("hello") # True
ends_with_exe = file_name.endswith("exe") # False
Удаление пробелов в начале и в конце строки:
string = " hello world! "
string = string.strip()
print(string) # hello world!
Дополнение строки пробелами и выравнивание:
print("iPhone 7:", "52000".rjust(10))
print("Huawei P10:", "36000".rjust(10))
Консольный вывод:
iPhone 7: 52000
Huawei P10: 36000
Поиск в строке
Для поиска подстроки в строке в Python применяется метод find(),
который возвращает индекс первого вхождения подстроки в строку и
имеет три формы:find(str): поиск подстроки str ведется с начала строки до ее
конца
find(str, start): параметр start задает начальный индекс, с
которого будет производиться поиск
find(str, start, end): параметр end задает конечный индекс, до
которого будет идти поиск
Если подстрока не найдена, метод возвращает -1:
welcome = "Hello world! Goodbye world!"
index = welcome.find("wor")
print(index) # 6
# поиск с 10-го индекса
index = welcome.find("wor",10)
print(index) # 21
# поиск с 10 по 15 индекс
index = welcome.find("wor",10,15)
print(index) # -1
Замена в строке
Для замены в строке одной подстроки на другую применяется метод
replace():
replace(old, new): заменяет подстроку old на new
replace(old, new, num): параметр num указывает, сколько
вхождений подстроки old надо заменить на new
phone = "+1-234-567-89-10"# замена дефисов на пробел
edited_phone = phone.replace("-", " ")
print(edited_phone) # +1 234 567 89 10
# удаление дефисов
edited_phone = phone.replace("-", "")
print(edited_phone) # +12345678910
# замена только первого дефиса
edited_phone = phone.replace("-", "", 1)
print(edited_phone) # +1234-567-89-10
Разделение на подстроки
Метод split() разбивает строку на список подстрок в зависимости от
разделителя. В качестве разделителя может выступать любой символ
или последовательность символов. Данный метод имеет следующие
формы:
split(): в качестве разделителя используется пробел
split(delimeter): в качестве разделителя используется
delimeter
split(delimeter, num): параметр num указывает, сколько
вхождений delimeter используется для разделения. Оставшаяся часть
строки добавляется в список без разделения на подстроки
text = "Это был огромный, в два обхвата дуб, с обломанными ветвями
и с обломанной корой"
# разделение по пробелам
splitted_text = text.split()
print(splitted_text)print(splitted_text[6]) # дуб,
# разбиение по запятым
splitted_text = text.split(",")
print(splitted_text)
print(splitted_text[1]) # в два обхвата дуб
# разбиение по первым пяти пробелам
splitted_text = text.split(" ", 5)
print(splitted_text)
print(splitted_text[5]) # обхвата дуб, с обломанными ветвями и
с обломанной корой
Соединение строк
При рассмотрении простейших операций со строками было показано,
как объединять строки с помощью операции сложения. Другую
возможность для соединения строк представляет метод join(): он
объединяет список строк. Причем текущая строка, у которой
вызывается данный метод, используется в качестве разделителя:
words = ["Let", "me", "speak", "from", "my", "heart", "in",
"English"]
# разделитель - пробел
sentence = " ".join(words)
print(sentence) # Let me speak from my heart in English
# разделитель - вертикальная черта
sentence = " | ".join(words)
print(sentence) # Let | me | speak | from | my | heart | in |
English
Вместо списка в метод join можно передать простую строку, тогда
разделитель будет вставляться между символами этой строки:word = "hello"
joined_word = "|".join(word)
print(joined_word) # h|e|l|l|oСамостоятельная работа
1. Найти в строке указанную подстроку и заменить ее на новую.
Строку, ее подстроку для замены и новую подстроку вводит
пользователь.
2. Вводится строка. Требуется удалить из нее повторяющиеся символы
и все пробелы. Например, если было введено "abc cde def", то
должно быть выведено "abcdef".
3. Вводится строка, содержащая буквы, целые неотрицательные числа
и иные символы. Требуется все числа, которые встречаются в строке,
поместить в отдельный список и вывести его на экран. Например,
если дана строка "data 48 call 9 read13 blank0a", то на экран
будет выведен список [48, 9, 13, 0].
4. Посчитать количество строчных (маленьких) и прописных (больших)
букв в введенной строке. Учитывать только английские буквы.
5. Вводится ненормированная строка, у которой могут быть пробелы в
начале, в конце и между словами более одного пробела. Привести ее
к нормированному виду, т.е. удалить все пробелы в начале и конце,
а между словами оставить только один пробел.
6. Определить, является ли введенное слово идентификатором, т.е.
начинается ли оно с английской буквы в любом регистре или знака
подчеркивания и не содержит других символов, кроме букв
английского алфавита (в любом регистре), цифр и знака
подчеркивания.
