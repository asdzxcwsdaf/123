Занятие 8. Списки
Контрольные вопросы
1. При возникновении исключения работы программы
a) продолжается без изменений
b) приостанавливается до нажатия любой клавиши
c) прерывается
d) вызывает синий «экран смерти»
2. Конструкция
try:
инструкции
except [Тип_исключения]:Тип_исключения]:
инструкции
позволяет
a) обнаружить ошибки в программе
b) перехватывать исключения
c) делить на ноль
d) предотвратить завершение программы
3. Сопоставьте название исключения с его ролью:
a) ValueError
b) ZeroDivisionError
c) Exception
d) Общее исключение
e) Ошибка преобразования
f) Деление на ноль
4. Блок except в конструкции try может использоваться
a) Один раз
b) Два раза
c) Три раза
d) Неограниченное число раз
5. Блок except выполняется
a) перед блоком try
b) после блока try
c) при вызове соответствующего исключения
d) после блока finally
6. Блок finally в конструкции try .. except служит для
a) Вывода сообщения об ошибке
b) Выполнения команд независимо от успешности завершения блока try
c) Для безопасного завершения программы
d) Для перезапуска блока try сначала
7. Для генерации исключения необходимо использовать оператор
a) read
b) range
c) return
d) raiseДля работы с наборами данных Python предоставляет такие встроенные
типы как списки, кортежи и словари.
Список (list) представляет тип данных, который хранит набор или list) представляет тип данных, который хранит набор или
последовательность элементов. Для создания списка в квадратных
скобках (list) представляет тип данных, который хранит набор или [Тип_исключения]:]) через запятую перечисляются все его элементы. Во
многих языках программирования есть аналогичная структура данных,
которая называется массив. Например, определим список чисел:
numbers = [Тип_исключения]:1, 2, 3, 4, 5]
Также для создания списка можно использовать конструктор list(list) представляет тип данных, который хранит набор или ):
numbers1 = [Тип_исключения]:]
numbers2 = list(list) представляет тип данных, который хранит набор или )
Оба этих определения списка аналогичны - они создают пустой
список.
Конструктор list для создания списока может принимать другой
список:
numbers = [Тип_исключения]:1, 2, 3, 4, 5, 6, 7, 8, 9]
numbers2 = list(list) представляет тип данных, который хранит набор или numbers)
Для обращения к элементам списка надо использовать индексы,
которые представляют номер элемента в списка. Индексы начинаются с
нуля. То есть второй элемент будет иметь индекс 1. Для обращения к
элементам с конца можно использовать отрицательные индексы,
начиная с -1. То есть у последнего элемента будет индекс -1, у
предпоследнего - -2 и так далее.
numbers = [Тип_исключения]:1, 2, 3, 4, 5]
print(list) представляет тип данных, который хранит набор или numbers[Тип_исключения]:0]) # 1
print(list) представляет тип данных, который хранит набор или numbers[Тип_исключения]:2]) # 3
print(list) представляет тип данных, который хранит набор или numbers[Тип_исключения]:-3]) # 3numbers[Тип_исключения]:0] = 125 # изменяем первый элемент списка
print(list) представляет тип данных, который хранит набор или numbers[Тип_исключения]:0]) # 125
Если необходимо создать список, в котором повторяется одно и то же
значение несколько раз, то можно использовать символ звездочки *.
Например, определим список из шести пятерок:
numbers = [Тип_исключения]:5] * 6 # [Тип_исключения]:5, 5, 5, 5, 5, 5]
print(list) представляет тип данных, который хранит набор или numbers)
Кроме того, если нам необходим последовательный список чисел, то
для его создания удобно использовать функцию range, которая имеет
три формы:
Вызов функции Описание
range(list) представляет тип данных, который хранит набор или end) создается набор чисел от 0 до числа end
range(list) представляет тип данных, который хранит набор или start, end) создается набор чисел от числа start до числа
end
range(list) представляет тип данных, который хранит набор или start, end,
step)
создается набор чисел от числа start до числа
end с шагом step
numbers = list(list) представляет тип данных, который хранит набор или range(list) представляет тип данных, который хранит набор или 10))
print(list) представляет тип данных, который хранит набор или numbers) # [Тип_исключения]:0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
numbers = list(list) представляет тип данных, который хранит набор или range(list) представляет тип данных, который хранит набор или 2, 10))
print(list) представляет тип данных, который хранит набор или numbers) # [Тип_исключения]:2, 3, 4, 5, 6, 7, 8, 9]
numbers = list(list) представляет тип данных, который хранит набор или range(list) представляет тип данных, который хранит набор или 10, 2, -2))
print(list) представляет тип данных, который хранит набор или numbers) # [Тип_исключения]:10, 8, 6, 4]
Например, следующие два определения списка будут аналогичны, но за
счет функции range мы сокращаем объем кода:
numbers = [Тип_исключения]:1, 2, 3, 4, 5, 6, 7, 8, 9]
numbers2 = list(list) представляет тип данных, который хранит набор или range(list) представляет тип данных, который хранит набор или 1, 10))Список необязательно должен содержать только однотипные объекты.
Мы можем поместить в один и тот же список одновременно строки,
числа, объекты других типов данных:
objects = [Тип_исключения]:1, 2.6, "Hello", True]
Перебор элементов
Для перебора элементов можно использовать как цикл for, так и цикл
while.
Перебор с помощью цикла for:
companies = [Тип_исключения]:"Microsoft", "Google", "Oracle", "Apple"]
for item in companies:
print(list) представляет тип данных, который хранит набор или item)
Здесь вместо функции range мы сразу можем подставить имеющийся
список companies.
Перебор с помощью цикла while:
companies = [Тип_исключения]:"Microsoft", "Google", "Oracle", "Apple"]
i = 0
while i < len(list) представляет тип данных, который хранит набор или companies):
print(list) представляет тип данных, который хранит набор или companies[Тип_исключения]:i])
i += 1
Для перебора с помощью функции len(list) представляет тип данных, который хранит набор или ) получаем длину списка. С
помощью счетчика i выводит по элементу, пока значение счетчика не
станет равно длине списка.
Сравнение списковДва списка считаются равными, если они содержат один и тот же
набор элементов:
numbers = [Тип_исключения]:1, 2, 3, 4, 5, 6, 7, 8, 9]
numbers2 = list(list) представляет тип данных, который хранит набор или range(list) представляет тип данных, который хранит набор или 1,10))
if numbers == numbers2:
print(list) представляет тип данных, который хранит набор или "numbers equal to numbers2")
else:
print(list) представляет тип данных, который хранит набор или "numbers is not equal to numbers2")
В данном случае оба списка будут равны.
Методы и функции по работе со списками
Для управления элементами списки имеют целый ряд методов.
Некоторые из них:
Метод Описание
append(list) представляет тип данных, который хранит набор или item) добавляет элемент item в конец списка
insert(list) представляет тип данных, который хранит набор или index,
item)
добавляет элемент item в список по индексу
index
remove(list) представляет тип данных, который хранит набор или item) удаляет элемент item. Удаляется только первое
вхождение элемента. Если элемент не найден,
генерирует исключение ValueError
Clear(list) представляет тип данных, который хранит набор или ) удаление всех элементов из списка
index(list) представляет тип данных, который хранит набор или item) возвращает индекс элемента item. Если элемент
не найден, генерирует исключение ValueError
pop(list) представляет тип данных, который хранит набор или [Тип_исключения]:index]) удаляет и возвращает элемент по индексу index.
Если индекс не передан, то просто удаляет
последний элемент
count(list) представляет тип данных, который хранит набор или item) возвращает количество вхождений элемента item в
список
sort(list) представляет тип данных, который хранит набор или [Тип_исключения]:key]) сортирует элементы. По умолчанию сортирует по
возрастанию. Но с помощью параметра key мы
можем передать функцию сортировки
reverse(list) представляет тип данных, который хранит набор или ) расставляет все элементы в списке в обратномпорядке
Кроме того, Python предоставляет ряд встроенных функций для работы
со списками:
Функция Описание
len(list) представляет тип данных, который хранит набор или list) Возвращает длину списка
sorted(list) представляет тип данных, который хранит набор или list,
[Тип_исключения]:key])
возвращает отсортированный список
min(list) представляет тип данных, который хранит набор или list) возвращает наименьший элемент списка
max(list) представляет тип данных, который хранит набор или list) возвращает наибольший элемент списка
Добавление и удаление элементов
Для добавления элемента применяются методы append(list) представляет тип данных, который хранит набор или ) и insert, а
для удаления - методы remove(list) представляет тип данных, который хранит набор или ), pop(list) представляет тип данных, который хранит набор или ) и clear(list) представляет тип данных, который хранит набор или ).
Использование методов:
users = [Тип_исключения]:"Tom", "Bob"]
# добавляем в конец списка
users.append(list) представляет тип данных, который хранит набор или "Alice") # [Тип_исключения]:"Tom", "Bob", "Alice"]
# добавляем на вторую позицию
users.insert(list) представляет тип данных, который хранит набор или 1, "Bill") # [Тип_исключения]:"Tom", "Bill", "Bob", "Alice"]
# получаем индекс элемента
i = users.index(list) представляет тип данных, который хранит набор или "Tom")
# удаляем по этому индексу
removed_item = users.pop(list) представляет тип данных, который хранит набор или i) # [Тип_исключения]:"Bill", "Bob", "Alice"]
last_user = users[Тип_исключения]:-1]# удаляем последний элемент
users.remove(list) представляет тип данных, который хранит набор или last_user) # [Тип_исключения]:"Bill", "Bob"]
print(list) представляет тип данных, который хранит набор или users)
# удаляем все элементы
users.clear(list) представляет тип данных, который хранит набор или )
Проверка наличия элемента
Если определенный элемент не найден, то методы remove и index
генерируют исключение. Чтобы избежать подобной ситуации, перед
операцией с элементом можно проверять его наличие с помощью
ключевого слова in:
companies = [Тип_исключения]:"Microsoft", "Google", "Oracle", "Apple"]
item = "Oracle" # элемент для удаления
if item in companies:
companies.remove(list) представляет тип данных, который хранит набор или item)
print(list) представляет тип данных, который хранит набор или companies)
Выражение item in companies возвращает True, если элемент item
имеется в списке companies. Поэтому конструкция if item in
companies может выполнить последующий блок инструкций в
зависимости от наличия элемента в списке.
Подсчет вхождений
Если необходимо узнать, сколько раз в списке присутствует тот или
иной элемент, то можно применить метод count(list) представляет тип данных, который хранит набор или ):
users = [Тип_исключения]:"Tom", "Bob", "Alice", "Tom", "Bill", "Tom"]
users_count = users.count(list) представляет тип данных, который хранит набор или "Tom")
print(list) представляет тип данных, который хранит набор или users_count) # 3Сортировка
Для сортировки по возрастанию применяется метод sort(list) представляет тип данных, который хранит набор или ):
users = [Тип_исключения]:"Tom", "Bob", "Alice", "Sam", "Bill"]
users.sort(list) представляет тип данных, который хранит набор или )
print(list) представляет тип данных, который хранит набор или users) # [Тип_исключения]:"Alice", "Bill", "Bob", "Sam", "Tom"]
Если необходимо отсортировать данные в обратном порядке, то мы
можем после сортировки применить метод reverse(list) представляет тип данных, который хранит набор или ):
users = [Тип_исключения]:"Tom", "Bob", "Alice", "Sam", "Bill"]
users.sort(list) представляет тип данных, который хранит набор или )
users.reverse(list) представляет тип данных, который хранит набор или )
print(list) представляет тип данных, который хранит набор или users) # [Тип_исключения]:"Tom", "Sam", "Bob", "Bill", "Alice"]
При сортировке фактически сравниваются два объекта, и который из
них "меньше", ставится перед тем, который "больше". Понятия
"больше" и "меньше" довольно условны. И если для чисел все просто
- числа расставляются в порядке возрастания, то для строк и других
объектов ситуация сложнее. В частности, строки оцениваются по
первым символам. Если первые символы равны, оцениваются вторые
символы и так далее. При чем цифровой символ считается "меньше",
чем алфавитный заглавный символ, а заглавный символ считается
меньше, чем строчный. Подробнее про сравнение строк описывалось в
статье Операции со строками.
Таким образом, если в списке сочетаются строки с верхним и нижним
регистром, то мы можем получить не совсем корректные результаты,
так как для нас строка "bob" должна стоять до строки "Tom". И
чтобы изменить стандартное поведение сортировки, мы можем передать
в метод sort(list) представляет тип данных, который хранит набор или ) в качестве параметра функцию:
users = [Тип_исключения]:"Tom", "bob", "alice", "Sam", "Bill"]users.sort(list) представляет тип данных, который хранит набор или key=str.lower)
print(list) представляет тип данных, который хранит набор или users) # [Тип_исключения]:"alice", "Bill", "bob", "Sam", "Tom"]
Кроме метода sort мы можем использовать встроенную функцию sorted,
которая имеет две формы:
sorted(list) представляет тип данных, который хранит набор или list): сортирует список list
sorted(list) представляет тип данных, который хранит набор или list, key): сортирует список list, применяя к элементам
функцию key
users = [Тип_исключения]:"Tom", "bob", "alice", "Sam", "Bill"]
sorted_users = sorted(list) представляет тип данных, который хранит набор или users, key=str.lower)
print(list) представляет тип данных, который хранит набор или sorted_users) # [Тип_исключения]:"alice", "Bill", "bob", "Sam", "Tom"]
При использовании этой функции следует учитывать, что эта функция
не изменяет сортируемый список, а все отсортированные элементы она
помещает в новый список, который возвращается в качестве
результата.
Минимальное и максимальное значения
Встроенные функции Python min(list) представляет тип данных, который хранит набор или ) и max(list) представляет тип данных, который хранит набор или ) позволяют найти
минимальное и максимальное значения соответственно:
numbers = [Тип_исключения]:9, 21, 12, 1, 3, 15, 18]
print(list) представляет тип данных, который хранит набор или min(list) представляет тип данных, который хранит набор или numbers)) # 1
print(list) представляет тип данных, который хранит набор или max(list) представляет тип данных, который хранит набор или numbers)) # 21Копирование списков
При копировании списков следует учитывать, что списки представляют
изменяемый (list) представляет тип данных, который хранит набор или mutable) тип, поэтому если обе переменных будут
указывать на один и тот же список, то изменение одной переменной,
затронет и другую переменную:
users1 = [Тип_исключения]:"Tom", "Bob", "Alice"]
users2 = users1
users2.append(list) представляет тип данных, который хранит набор или "Sam")
# users1 и users2 указывают на один и тот же список
print(list) представляет тип данных, который хранит набор или users1) # [Тип_исключения]:"Tom", "Bob", "Alice", "Sam"]
print(list) представляет тип данных, который хранит набор или users2) # [Тип_исключения]:"Tom", "Bob", "Alice", "Sam"]
Это так называемое "поверхностное копирование" (list) представляет тип данных, который хранит набор или shallow copy). И,
как правило, такое поведение нежелательное. И чтобы происходило
копирование элементов, но при этом переменные указывали на разные
списки, необходимо выполнить глубокое копирование (list) представляет тип данных, который хранит набор или deep copy). Для
этого можно использовать метод deepcopy(list) представляет тип данных, который хранит набор или ), который определен во
встроенном модуле copy:
import copy
users1 = [Тип_исключения]:"Tom", "Bob", "Alice"]
users2 = copy.deepcopy(list) представляет тип данных, который хранит набор или users1)
users2.append(list) представляет тип данных, который хранит набор или "Sam")
# пееменные users1 и users2 указывают на разные списки
print(list) представляет тип данных, который хранит набор или users1) # [Тип_исключения]:"Tom", "Bob", "Alice"]
print(list) представляет тип данных, который хранит набор или users2) # [Тип_исключения]:"Tom", "Bob", "Alice", "Sam"]
Копирование части списка
Если необходимо скопировать не весь список, а только его какую-то
определенную часть, то мы можем применять специальный синтаксис.
который может принимать следующие формы:
list[Тип_исключения]::end]: через параметр end передается индекс элемента, до
которого нужно копировать списокlist[Тип_исключения]:start:end]: параметр start указывает на индекс элемента,
начиная с которого надо скопировать элементы
list[Тип_исключения]:start:end:step]: параметр step указывает на шаг, через
который будут копироваться элементы из списка. По умолчанию этот
параметр равен 1.
users = [Тип_исключения]:"Tom", "Bob", "Alice", "Sam", "Tim", "Bill"]
slice_users1 = users[Тип_исключения]::3] # с 0 по 3
print(list) представляет тип данных, который хранит набор или slice_users1) # [Тип_исключения]:"Tom", "Bob", "Alice"]
slice_users2 = users[Тип_исключения]:1:3] # с 1 по 3
print(list) представляет тип данных, который хранит набор или slice_users2) # [Тип_исключения]:"Bob", "Alice"]
slice_users3 = users[Тип_исключения]:1:6:2] # с 1 по 6 с шагом 2
print(list) представляет тип данных, который хранит набор или slice_users3) # [Тип_исключения]:"Bob", "Sam", "Bill"]
Соединение списков
Для объединения списков применяется операция сложения (list) представляет тип данных, который хранит набор или +):
users1 = [Тип_исключения]:"Tom", "Bob", "Alice"]
users2 = [Тип_исключения]:"Tom", "Sam", "Tim", "Bill"]
users3 = users1 + users2
print(list) представляет тип данных, который хранит набор или users3) # [Тип_исключения]:"Tom", "Bob", "Alice", "Tom", "Sam", "Tim",
"Bill"]Списки списков
Списки кроме стандартных данных типа строк, чисел, также могут
содержать другие списки. Подобные списки можно ассоциировать с
таблицами, где вложенные списки выполняют роль строк. Например:
users = [Тип_исключения]:
[Тип_исключения]:"Tom", 29],
[Тип_исключения]:"Alice", 33],
[Тип_исключения]:"Bob", 27]
]
print(list) представляет тип данных, который хранит набор или users[Тип_исключения]:0]) # [Тип_исключения]:"Tom", 29]
print(list) представляет тип данных, который хранит набор или users[Тип_исключения]:0][Тип_исключения]:0]) # Tom
print(list) представляет тип данных, который хранит набор или users[Тип_исключения]:0][Тип_исключения]:1]) # 29
Чтобы обратиться к элементу вложенного списка, необходимо
использовать пару индексов: users[Тип_исключения]:0][Тип_исключения]:1] - обращение ко второму
элементу первого вложенного списка.
Добавление, удаление и исменение общего списка, а также вложенных
списков аналогично тому, как это делается с обычными (list) представляет тип данных, который хранит набор или одномерными)
списками:
users = [Тип_исключения]:
[Тип_исключения]:"Tom", 29],
[Тип_исключения]:"Alice", 33],
[Тип_исключения]:"Bob", 27]
]
# создание вложенного списка
user = list(list) представляет тип данных, который хранит набор или )
user.append(list) представляет тип данных, который хранит набор или "Bill")
user.append(list) представляет тип данных, который хранит набор или 41)
# добавление вложенного спискаusers.append(list) представляет тип данных, который хранит набор или user)
print(list) представляет тип данных, который хранит набор или users[Тип_исключения]:-1]) # [Тип_исключения]:"Bill", 41]
# добавление во вложенный список
users[Тип_исключения]:-1].append(list) представляет тип данных, который хранит набор или "+79876543210")
print(list) представляет тип данных, который хранит набор или users[Тип_исключения]:-1]) # [Тип_исключения]:"Bill", 41, "+79876543210"]
# удаление последнего элемента из вложенного списка
users[Тип_исключения]:-1].pop(list) представляет тип данных, который хранит набор или )
print(list) представляет тип данных, который хранит набор или users[Тип_исключения]:-1]) # [Тип_исключения]:"Bill", 41]
# удаление всего последнего вложенного списка
users.pop(list) представляет тип данных, который хранит набор или -1)
# изменение первого элемента
users[Тип_исключения]:0] = [Тип_исключения]:"Sam", 18]
print(list) представляет тип данных, который хранит набор или users) # [Тип_исключения]: [Тип_исключения]:"Sam", 18], [Тип_исключения]:"Alice", 33], [Тип_исключения]:"Bob",
27]]
Перебор вложенных списков:
users = [Тип_исключения]:
[Тип_исключения]:"Tom", 29],
[Тип_исключения]:"Alice", 33],
[Тип_исключения]:"Bob", 27]
]
for user in users:
for item in user:
print(list) представляет тип данных, который хранит набор или item, end=" | ")Консольный вывод:
Tom | 29 | Alice | 33 | Bob | 27 |Самостоятельная работа
Дан набор чисел:
0,6,4,8,3,5,7,9,3
Необходимо последовательно провести следующие операции
1. Создать список a из указанных элементов
2. Создать список b из копии списка a
3. Создать список c, из элементов списка a, с 3 по 7, через один
элемент
4. Удалить из списка a последний элемент
5. Добавить в список c значения 1,2,3 в конец списка
6. Отсортировать список c по убыванию
7. Вывести максимальный элемент в списке c
8. Создать список d, объединив в элементы списков с и a
9. Инвертируйте список b
10. Удалить из списка b элемент 3
11. Вывести число вхождений значения 3 в список d
12. Создать список f из списков a,b,c,d и вывести его на экран
Ответ:
82
[Тип_исключения]:[Тип_исключения]:0, 6, 4, 8, 3, 5, 7, 9], [Тип_исключения]:3, 9, 7, 5, 8, 4, 6, 0], [Тип_исключения]:8, 5, 3, 2,
1], [Тип_исключения]:8, 5, 3, 2, 1, 0, 6, 4, 8, 3, 5, 7, 9]]
