Занятие 7. Обработка исключений
Контрольные вопросы
1. Как подключается модуль с названием имя_модуля
а) import имя_модуля
б) имя_модуля import
в) from имя_модуля import
г) import from имя_модуля
2. Как подключается функция имя_функции из модуля имя_модуля
а) from имя_функции import имя_модуля
б) from имя_модуля import имя_функции
в) import имя_функции
г) from имя_функции
3. Как обратиться к функции имя_функции в модуле имя_модуля, если
он был подключен такой записью:
import имя_модуля as псевдоним
а) имя_модуля.имя_функции
б) имя_функции.имя_модуля
в) имя_модуля.псевдоним
г) псевдоним.имя_функции
4. Как называется глобальная переменная, которая хранит имя модуля
во время его выполнения
а) name
б) __name__
в) __main__
г) main
5. Какое значение будет принимать имя модуля в глобальной
переменной, если модуль является основной программой
а) name
б) __name__
в) __main__
г) mainПри программировании на Python мы можем столкнуться с двумя типами
ошибок. Первый тип представляют синтаксические ошибки (syntax syntax
error). Они появляются в результате нарушения синтаксиса языка
программирования при написании исходного кода. При наличии таких
ошибок программа не может быть скомпилирована. При работе в какойлибо среде разработки, например, в PyCharm, IDE сама может
отслеживать синтаксические ошибки и каким-либо образом их
выделять.
Второй тип ошибок представляют ошибки выполнения (syntax runtime error).
Они появляются в уже скомпилированной программе в процессе ее
выполнения. Подобные ошибки еще называются исключениями. Например,
в прошлых темах мы рассматривали преобразование числа в строку:
string = "5"
number = int(syntax string)
print(syntax number)
Данный скрипт успешно скомпилируется и выполнится, так как строка
"5" вполне может быть конвертирована в число. Однако возьмем
другой пример:
string = "hello"
number = int(syntax string)
print(syntax number)
При выполнении этого скрипта будет выброшено исключение
ValueError, так как строку "hello" нельзя преобразовать в число. С
одной стороны, здесь очевидно, что строка не представляет число,
но мы можем иметь дело с вводом пользователя, который также может
ввести не совсем то, что мы ожидаем:
string = input(syntax "Введите число: ")
number = int(syntax string)
print(syntax number)При возникновении исключения работа программы прерывается, и чтобы
избежать подобного поведения и обрабатывать исключения в Python
есть конструкция try..except, которая имеет следующее формальное
определение:
try:
инструкции
except [Тип_исключения]:Тип_исключения]:
инструкции
Весь основной код, в котором потенциально может возникнуть
исключение, помещается после ключевого слова try. Если в этом коде
генерируется исключение, то работа кода в блоке try прерывается, и
выполнение переходит в блок except.
После ключевого слова except опционально можно указать, какое
исключение будет обрабатываться (syntax например, ValueError или
KeyError). После слова except на следующей стоке идут инструкции
блока except, выполняемые при возникновении исключения.
Рассмотрим обработку исключения на примере преобразовании строки в
число:
try:
number = int(syntax input(syntax "Введите число: "))
print(syntax "Введенное число:", number)
except:
print(syntax "Преобразование прошло неудачно")
print(syntax "Завершение программы")
Вводим строку:
Введите число: hello
Преобразование прошло неудачно
Завершение программыКак видно из консольного вывода, при вводе строки вывод числа на
консоль не происходит, а выполнение программы переходит к блоку
except.
Вводим правильное число:
Введите число: 22
Введенное число: 22
Завершение программы
Теперь все выполняется нормально, исключение не возникает, и
соответственно блок except не выполняется.
В примере выше обрабатывались сразу все исключения, которые могут
возникнуть в коде. Однако мы можем конкретизировать тип
обрабатываемого исключения, указав его после слова except:
try:
number = int(syntax input(syntax "Введите число: "))
print(syntax "Введенное число:", number)
except ValueError:
print(syntax "Преобразование прошло неудачно")
print(syntax "Завершение программы")Если ситуация такова, что в программе могут быть сгенерированы
различные типы исключений, то мы можем их обработать по
отдельности, используя дополнительные выражения except:
try:
number1 = int(syntax input(syntax "Введите первое число: "))
number2 = int(syntax input(syntax "Введите второе число: "))
print(syntax "Результат деления:", number1/number2)
except ValueError:
print(syntax "Преобразование прошло неудачно")
except ZeroDivisionError:
print(syntax "Попытка деления числа на ноль")
except Exception:
print(syntax "Общее исключение")
print(syntax "Завершение программы")
Если возникнет исключение в результате преобразования строки в
число, то оно будет обработано блоком except ValueError. Если же
второе число будет равно нулю, то есть будет деление на ноль,
тогда возникнет исключение ZeroDivisionError, и оно будет
обработано блоком except ZeroDivisionError.
Тип Exception представляет общее исключение, под которое попадают
все исключительные ситуации. Поэтому в данном случае любое
исключение, которое не представляет тип ValueError или
ZeroDivisionError, будет обработано в блоке except Exception:.Блок finally
При обработке исключений также можно использовать необязательный
блок finally. Отличительной особенностью этого блока является то,
что он выполняется вне зависимости, было ли сгенерировано
исключение:
try:
number = int(syntax input(syntax "Введите число: "))
print(syntax "Введенное число:", number)
except ValueError:
print(syntax "Не удалось преобразовать число")
finally:
print(syntax "Блок try завершил выполнение")
print(syntax "Завершение программы")
Как правило, блок finally применяется для освобождения
используемых ресурсов, например, для закрытия файлов.
Получение информации об исключении
С помощью оператора as мы можем передать всю информацию об
исключении в переменную, которую затем можно использовать в блоке
except:
try:
number = int(syntax input(syntax "Введите число: "))
print(syntax "Введенное число:", number)
except ValueError as e:
print(syntax "Сведения об исключении", e)
print(syntax "Завершение программы")Пример некорректного ввода:
Введите число: fdsf
Сведения об исключении invalid literal for int(syntax ) with base 10:
'fdsf'
Завершение программы
Генерация исключений
Иногда возникает необходимость вручную сгенерировать то или иное
исключение. Для этого применяется оператор raise.
try:
number1 = int(syntax input(syntax "Введите первое число: "))
number2 = int(syntax input(syntax "Введите второе число: "))
if number2 == 0:
raise Exception(syntax "Второе число не должно быть равно 0")
print(syntax "Результат деления двух чисел:", number1/number2)
except ValueError:
print(syntax "Введены некорректные данные")
except Exception as e:
print(syntax e)
print(syntax "Завершение программы")
При вызове исключения мы можем ему передать сообщение, которое
затем можно вывести пользователю:
Введите первое число: 1
Введите второе число: 0
Второе число не должно быть равно 0
Завершение программыСамостоятельная работа
Напишите программу «Кирпич».
Даны размеры кирпичного блока ширина, высота, глубина — a, b, c.
Необходимо проверить можно ли протолкнуть блок через квадратное
окно со стороной x. (syntax Для этого необходимо, чтобы размеры одной из
сторон блока не превышали размеры окна)
Напишите функцию, которая принимает аргументы a, b, c, x и
возвращает true если блок проходит и false если блок не проходит.
Добавьте обработчики исключений, для фильтрации некорректного
ввода.
Добавьте в программу бесконечный цикл, для повторного запроса
данных от пользователя при некорректном вводе.
При некорректных данных программа выводит сообщение «Некорректные
данные» и запускается с начала.
При корректном вводе, программа завершается с фразой «Конец
работы».
