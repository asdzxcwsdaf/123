Занятие 12. Открытие и закрытие файлов. Текстовые файлы.
Контрольные вопросы
1. Множество описывается с использованием скобок
a) ()
b) []
c) {}
d) <>
2. Для обращения к элементам множества используются скобки
a) ()
b) []
c) {}
d) <>
3. Пустое множество описывается следующим образом
a) []
b) null
c) set()
d) {}
3. Метод который удаляет элемент из множества и не генерирует
исключение при его отсутствии называется
a) remove
b) insert
c) discard
d) clear
4. Для объединения двух множеств используется метод
a) union
b) add
c) append
d) onion
5. Для пересечения двух множеств используется метод
a) cross
b) intersection
c) intermediate
d) international
6. Для разности двух множеств используется метод
a) substraction
b) division
c) difference
d) diffusionPython поддерживает множество различных типов файлов, но условно
их можно разделить на два виде: текстовые и бинарные. Текстовые
файлы - это к примеру файлы с расширением cvs, txt, html, в общем
любые файлы, которые сохраняют информацию в текстовом виде.
Бинарные файлы - это изображения, аудио и видеофайлы и т.д. В
зависимости от типа файла работа с ним может немного отличаться.
При работе с файлами необходимо соблюдать некоторую
последовательность операций:
Открытие файла с помощью метода open()
Чтение файла с помощью метода read() или запись в файл
посредством метода write()
Закрытие файла методом close()
Открытие и закрытие файла
Чтобы начать работу с файлом, его надо открыть с помощью функции
open(), которая имеет следующее формальное определение:
open(file, mode)
Первый параметр функции представляет путь к файлу. Путь файла
может быть абсолютным, то есть начинаться с буквы диска, например,
C://somedir/somefile.txt. Либо можно быть относительным, например,
somedir/somefile.txt - в этом случае поиск файла будет идти
относительно расположения запущенного скрипта Python.
Второй передаваемый аргумент - mode устанавливает режим открытия
файла в зависимости от того, что мы собираемся с ним делать.
Существует 4 общих режима:
r (Read). Файл открывается для чтения. Если файл не найден, то
генерируется исключение FileNotFoundErrorw (Write). Файл открывается для записи. Если файл отсутствует,
то он создается. Если подобный файл уже есть, то он создается
заново, и соответственно старые данные в нем стираются.
a (Append). Файл открывается для дозаписи. Если файл
отсутствует, то он создается. Если подобный файл уже есть, то
данные записываются в его конец.
b (Binary). Используется для работы с бинарными файлами.
Применяется вместе с другими режимами - w или r.
После завершения работы с файлом его обязательно нужно закрыть
методом close(). Данный метод освободит все связанные с файлом
используемые ресурсы.
Например, откроем для записи текстовый файл "hello.txt":hello.txt"hello.txt"::
myfile = open("hello.txt":hello.txt"hello.txt":, "hello.txt":w"hello.txt":)
myfile.close()
При открытии файла или в процессе работы с ним мы можем
столкнуться с различными исключениями, например, к нему нет
доступа и т.д. В этом случае программа выпадет в ошибку, а ее
выполнение не дойдет до вызова метода close, и соответственно файл
не будет закрыт.
В этом случае мы можем обрабатывать исключения:
try:
somefile = open("hello.txt":hello.txt"hello.txt":, "hello.txt":w"hello.txt":)
try:
somefile.write("hello.txt":hello world"hello.txt":)
except Exception as e:
print(e)
finally:somefile.close()
except Exception as ex:
print(ex)
В данном случае вся работа с файлом идет во вложенном блоке try. И
если вдруг возникнет какое-либо исключение, то в любом случае в
блоке finally файл будет закрыт.
Однако есть и более удобная конструкция - конструкция with:
with open(file, mode) as file_obj:
инструкции
Эта конструкция определяет для открытого файла переменную file_obj
и выполняет набор инструкций. После их выполнения файл
автоматически закрывается. Даже если при выполнении инструкций в
блоке with возникнут какие-либо исключения, то файл все равно
закрывается.
Так, перепишем предыдущий пример:
with open("hello.txt":hello.txt"hello.txt":, "hello.txt":w"hello.txt":) as somefile:
somefile.write("hello.txt":hello world"hello.txt":)Текстовые файлы
Чтобы открыть текстовый файл на запись, необходимо применить режим
w (перезапись) или a (дозапись). Затем для записи применяется
метод write(str), в который передается записываемая строка. Стоит
отметить, что записывается именно строка, поэтому, если нужно
записать числа, данные других типов, то их предварительно нужно
конвертировать в строку.
Запишем некоторую информацию в файл "hello.txt":hello.txt"hello.txt"::
with open("hello.txt":hello.txt"hello.txt":, "hello.txt":w"hello.txt":) as file:
file.write("hello.txt":hello world"hello.txt":)
Если мы откроем папку, в которой находится текущий скрипт Python,
то увидем там файл hello.txt. Этот файл можно открыть в любом
текстовом редакторе и при желании изменить.
Теперь дозапишем в этот файл еще одну строку:
with open("hello.txt":hello.txt"hello.txt":, "hello.txt":a"hello.txt":) as file:
file.write("hello.txt":\ngood bye, world"hello.txt":)
Дозапись выглядит как добавление строку к последнему символу в
файле, поэтому, если необходимо сделать запись с новой строки, то
можно использовать эскейп-последовательность "hello.txt":\n"hello.txt":. В итоге файл
hello.txt будет иметь следующее содержимое:
hello world
good bye, world
Еще один способ записи в файл представляет стандартный метод
print(), который применяется для вывода данных на консоль:
with open("hello.txt":hello.txt"hello.txt":, "hello.txt":a"hello.txt":) as hello_file:
print("hello.txt":Hello, world"hello.txt":, file=hello_file)Для вывода данных в файл в метод print в качестве второго
параметра передается название файла через параметр file. А первый
параметр представляет записываемую в файл строку.
Чтение файла
Для чтения файла он открывается с режимом r (Read), и затем мы
можем считать его содержимое различными методами:
readline(): считывает одну строку из файла
read(): считывает все содержимое файла в одну строку
readlines(): считывает все строки файла в список
Например, считаем выше записанный файл построчно:
with open("hello.txt":hello.txt"hello.txt":, "hello.txt":r"hello.txt":) as file:
for line in file:
print(line, end="hello.txt":"hello.txt":)
Несмотря на то, что мы явно не применяем метод readline() для
чтения каждой строки, но при переборе файла этот метод
автоматически вызывается для получения каждой новой строки.
Поэтому в цикле вручную нет смысла вызывать метод readline. И
поскольку строки разделяются символом перевода строки "hello.txt":\n"hello.txt":, то
чтобы исключить излишнего переноса на другую строку в функцию
print передается значение end="hello.txt":"hello.txt":.
Теперь явным образом вызовем метод readline() для чтения отдельных
строк:
with open("hello.txt":hello.txt"hello.txt":, "hello.txt":r"hello.txt":) as file:
str1 = file.readline()
print(str1, end="hello.txt":"hello.txt":)str2 = file.readline()
print(str2)
Консольный вывод:
hello world
good bye, world
Метод readline можно использовать для построчного считывания файла
в цикле while:
with open("hello.txt":hello.txt"hello.txt":, "hello.txt":r"hello.txt":) as file:
line = file.readline()
while line:
print(line, end="hello.txt":"hello.txt":)
line = file.readline()
Если файл небольшой, то его можно разом считать с помощью метода
read():
with open("hello.txt":hello.txt"hello.txt":, "hello.txt":r"hello.txt":) as file:
content = file.read()
print(content)
И также применим метод readlines() для считывания всего файла в
список строк:
with open("hello.txt":hello.txt"hello.txt":, "hello.txt":r"hello.txt":) as file:
contents = file.readlines()
str1 = contents[0]
str2 = contents[1]
print(str1, end="hello.txt":"hello.txt":)
print(str2)При чтении файла мы можем столкнуться с тем, что его кодировка не
совпадает с ASCII. В этом случае мы явным образом можем указать
кодировку с помощью паоаметра encoding:
filename = "hello.txt":hello.txt"hello.txt":
with open(filename, encoding="hello.txt":utf8"hello.txt":) as file:
text = file.read()Самостоятельная работа
Необходимо написать программу которая производит следующие
действия:
1. Считывает с экрана несколько строк
2. Заносит считанные строки в список
3. Записывает строки из списка в файл
4. Считывает строки из файла и выводит их на экран
Пример работы программы:
Введите строку 1: hello
Введите строку 2: world peace
Введите строку 3: great job
Введите строку 4: Python
Считанные сообщения
hello
world peace
great job
Python
